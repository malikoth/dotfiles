#! /usr/bin/env python

"""
Python Calculator - Comprehensive command line interface to python expressions.

Batteries included!  Imports os, sys, math.*, random.*, Decimal, and pprint as pp.

Also includes additional modules based on the following switches.
"""

import sys
import os
import importlib
import argparse
from functools import cached_property

from math import *
from random import *
from decimal import Decimal
from pprint import pprint as pp


class PyCalc:
    def __init__(self):
        command = self.args.command
        del vars(self.args)['command']
        for k, v in vars(self.args).items():
            if v:
                globals().update(vars(importlib.import_module(k)))

        namespace = {}
        try:
            result = eval(command, globals(), namespace)
            if result:
                print(result)
        except Exception:
            exec(command, globals(), namespace)

    @cached_property
    def args(self):
        parser = argparse.ArgumentParser(
            description=__doc__,
            formatter_class=argparse.RawDescriptionHelpFormatter
        )
        parser.add_argument('-c', '--collections', action='store_true')
        parser.add_argument('-C', '--csv', action='store_true')
        parser.add_argument('-d', '--datetime', action='store_true')
        parser.add_argument('-r', '--re', action='store_true')
        parser.add_argument('-u', '--shutil', action='store_true')
        parser.add_argument('-s', '--statistics', action='store_true')
        parser.add_argument('-z', '--zlib', action='store_true')
        parser.add_argument('command', nargs=argparse.REMAINDER, help=argparse.SUPPRESS)

        args = parser.parse_args()
        args.command = ' '.join(args.command)

        if not args.command:
            parser.print_help()
            sys.exit(0)
        else:
            return args


if __name__ == '__main__':
    PyCalc()
